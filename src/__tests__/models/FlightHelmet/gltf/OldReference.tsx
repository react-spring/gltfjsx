/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./FlightHelmet.gltf -o OldReference.tsx --types --keepnames --shadows 
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Hose_low: THREE.Mesh
    RubberWood_low: THREE.Mesh
    GlassPlastic_low: THREE.Mesh
    MetalParts_low: THREE.Mesh
    LeatherParts_low: THREE.Mesh
    Lenses_low: THREE.Mesh
  }
  materials: {
    HoseMat: THREE.MeshStandardMaterial
    RubberWoodMat: THREE.MeshStandardMaterial
    GlassPlasticMat: THREE.MeshStandardMaterial
    MetalPartsMat: THREE.MeshStandardMaterial
    LeatherPartsMat: THREE.MeshStandardMaterial
    LensesMat: THREE.MeshPhysicalMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/FlightHelmet.gltf') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh name="Hose_low" castShadow receiveShadow geometry={nodes.Hose_low.geometry} material={materials.HoseMat} />
      <mesh name="RubberWood_low" castShadow receiveShadow geometry={nodes.RubberWood_low.geometry} material={materials.RubberWoodMat} />
      <mesh name="GlassPlastic_low" castShadow receiveShadow geometry={nodes.GlassPlastic_low.geometry} material={materials.GlassPlasticMat} />
      <mesh name="MetalParts_low" castShadow receiveShadow geometry={nodes.MetalParts_low.geometry} material={materials.MetalPartsMat} />
      <mesh name="LeatherParts_low" castShadow receiveShadow geometry={nodes.LeatherParts_low.geometry} material={materials.LeatherPartsMat} />
      <mesh name="Lenses_low" castShadow receiveShadow geometry={nodes.Lenses_low.geometry} material={materials.LensesMat} />
    </group>
  )
}

useGLTF.preload('/FlightHelmet.gltf')
